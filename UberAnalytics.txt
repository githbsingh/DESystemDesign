- Data Engineer System Design vs General System Design 
    — they are related but different in priorities.

Genaral System Design 

Goal:
Design scalable, maintainable systems for features like user login, notification service, payment processing, etc.

Focus Areas:

1. Request/response lifecycle

2. High availability

3. Load balancing

4. Latency optimization

5. Stateless services

6. Microservices or monolith choices

7. API design (REST, GraphQL)

8. Caching (Redis, Memcached)

9. Scalability (horizontal/vertical)

10. Resiliency (circuit breakers, retries)

11. Security (auth, encryption)


DATA Engineering System Design 
Goal:
Design reliable, scalable systems to collect, store, process, and serve large volumes of data.

Focus Areas:

1. Data ingestion (streaming vs batch)

2. Data transformation (ETL/ELT pipelines)

3. Storage systems (Data lakes, Data warehouses)
   DATA Lake is used to store unstructured data (Ex- Google Cloud Storage) 
   DATA Warehouse is used to store structured data (Ex- Google BigQuery)

4. File formats (Parquet, ORC, Avro, JSON)

5. Workflow orchestration (Airflow, Dagster)

6. Data partitioning, bucketing

7. Data schema evolution

8. Consistency vs eventual consistency

9. Query performance optimization (indexes, denormalization)

10. Cost efficiency (especially cloud storage and compute)

11. Data governance (quality, lineage, security, catalog)

Typical Example:
Design a system to collect millions of users’ clickstream data, store it, process it into daily reports, and serve it for analytics teams in BigQuery or Snowflake.


Problem Statement:
Design a Real-time Uber Trip Analytics System
Imagine Uber wants a dashboard that shows:

a. Number of ongoing trips
b. Average trip duration
c. Popular pickup/drop-off locations
d. City-level daily trip counts

Note: The dashboard should update every few seconds.


Requirements:
- Real-time or near real-time data
= Handle millions of trips daily